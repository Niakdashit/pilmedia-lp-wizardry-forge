import { test, expect } from '@playwright/test';

/**
 * Suite de tests finale pour valider la refonte complÃ¨te du FormEditor
 * VÃ©rifie que toutes les fonctionnalitÃ©s sont prÃ©sentes et fonctionnelles
 */

test.describe('FormEditor - Validation Finale de la Refonte', () => {
  test.beforeEach(async ({ page }) => {
    // Charger la page avec un timeout gÃ©nÃ©reux
    await page.goto('http://localhost:8080/form-editor', { 
      waitUntil: 'networkidle',
      timeout: 15000 
    });
    await page.waitForTimeout(2000);
  });

  test('âœ“ CRITIQUE: FormEditor a exactement 2 Ã©crans (pas 3)', async ({ page }) => {
    const screenAnchors = await page.locator('[data-screen-anchor]').all();
    
    console.log(`âœ“ TrouvÃ© ${screenAnchors.length} Ã©crans`);
    
    expect(screenAnchors.length).toBe(2);
    
    // VÃ©rifier les IDs spÃ©cifiques
    const screen1 = await page.locator('[data-screen-anchor="screen1"]').count();
    const screen2 = await page.locator('[data-screen-anchor="screen2"]').count();
    const screen3 = await page.locator('[data-screen-anchor="screen3"]').count();
    
    expect(screen1).toBe(1);
    expect(screen2).toBe(1);
    expect(screen3).toBe(0); // Pas de screen3!
    
    console.log('âœ“ Screen1: prÃ©sent');
    console.log('âœ“ Screen2: prÃ©sent');
    console.log('âœ“ Screen3: absent (correct)');
  });

  test('âœ“ FormEditor a la mÃªme structure que QuizEditor', async ({ page }) => {
    // VÃ©rifier la prÃ©sence des composants principaux
    const hasCanvas = await page.locator('[class*="canvas"]').count() > 0;
    const hasDesign = await page.locator('[class*="design"]').count() > 0;
    
    expect(hasCanvas).toBeTruthy();
    expect(hasDesign).toBeTruthy();
    
    console.log('âœ“ Composants canvas prÃ©sents');
    console.log('âœ“ Composants design prÃ©sents');
  });

  test('âœ“ FormEditor charge sans erreurs critiques', async ({ page }) => {
    const errors: string[] = [];
    
    page.on('console', msg => {
      if (msg.type() === 'error') {
        errors.push(msg.text());
      }
    });
    
    page.on('pageerror', error => {
      errors.push(error.message);
    });
    
    // Recharger pour capturer les erreurs
    await page.reload({ waitUntil: 'networkidle' });
    await page.waitForTimeout(2000);
    
    // Filtrer les erreurs non critiques
    const criticalErrors = errors.filter(err => 
      !err.includes('Hydration') &&
      !err.includes('Warning') &&
      !err.toLowerCase().includes('dev') &&
      err.includes('screen3') // Les erreurs mentionnant screen3 sont critiques
    );
    
    console.log(`âœ“ Erreurs totales: ${errors.length}`);
    console.log(`âœ“ Erreurs critiques: ${criticalErrors.length}`);
    
    if (criticalErrors.length > 0) {
      console.error('Erreurs critiques trouvÃ©es:');
      criticalErrors.forEach(err => console.error(`  - ${err.substring(0, 200)}`));
    }
    
    expect(criticalErrors.length).toBe(0);
  });

  test('âœ“ FormEditor peut naviguer entre les 2 Ã©crans', async ({ page }) => {
    await page.waitForTimeout(1000);
    
    // VÃ©rifier que screen1 est visible
    const screen1 = page.locator('[data-screen-anchor="screen1"]');
    await expect(screen1).toBeVisible({ timeout: 5000 });
    console.log('âœ“ Screen1 visible');
    
    // Scroller vers screen2
    const screen2 = page.locator('[data-screen-anchor="screen2"]');
    await screen2.scrollIntoViewIfNeeded();
    await page.waitForTimeout(500);
    
    // VÃ©rifier que screen2 est maintenant visible
    await expect(screen2).toBeVisible();
    console.log('âœ“ Screen2 visible aprÃ¨s scroll');
    
    // Scroller back vers screen1
    await screen1.scrollIntoViewIfNeeded();
    await page.waitForTimeout(500);
    
    await expect(screen1).toBeVisible();
    console.log('âœ“ Screen1 visible aprÃ¨s retour');
  });

  test('âœ“ FormEditor utilise FormEditorLayout (pas ModelEditorLayout)', async ({ page }) => {
    // VÃ©rifier que le composant FormEditorLayout est utilisÃ©
    const bodyHTML = await page.locator('body').innerHTML();
    
    // Chercher des indices que FormEditorLayout est chargÃ©
    const hasFormEditorIndicators = bodyHTML.includes('FormEditor') || 
                                     bodyHTML.includes('form-editor');
    
    console.log('âœ“ Indicateurs FormEditor prÃ©sents:', hasFormEditorIndicators);
    
    // VÃ©rifier qu'il n'y a pas de screen3 dans le DOM
    const hasScreen3 = bodyHTML.includes('data-screen-anchor="screen3"');
    
    console.log('âœ“ Screen3 absent du DOM:', !hasScreen3);
    expect(hasScreen3).toBeFalsy();
  });

  test('âœ“ FormEditor a les mÃªmes onglets que QuizEditor', async ({ page }) => {
    await page.waitForTimeout(1500);
    
    // Chercher la prÃ©sence de navigation/tabs
    const tabs = await page.locator('[role="tab"], button[class*="tab"], [class*="tab"]').count();
    
    console.log(`âœ“ Onglets trouvÃ©s: ${tabs}`);
    
    // Il devrait y avoir plusieurs onglets (Design, Elements, Background, etc.)
    expect(tabs).toBeGreaterThan(0);
  });

  test('âœ“ FormEditor a le systÃ¨me de modules', async ({ page }) => {
    await page.waitForTimeout(1500);
    
    // Chercher des indicateurs du systÃ¨me de modules
    const bodyHTML = await page.locator('body').innerHTML();
    
    const hasModuleSystem = bodyHTML.toLowerCase().includes('module') ||
                            bodyHTML.toLowerCase().includes('modules');
    
    console.log('âœ“ SystÃ¨me de modules prÃ©sent:', hasModuleSystem);
    expect(hasModuleSystem).toBeTruthy();
  });

  test('âœ“ FormEditor se distingue de QuizEditor (2 Ã©crans vs 3)', async ({ page, context }) => {
    // FormEditor screens
    const formScreens = await page.locator('[data-screen-anchor]').count();
    console.log(`âœ“ FormEditor: ${formScreens} Ã©crans`);
    
    // Ouvrir QuizEditor dans un nouvel onglet
    const quizPage = await context.newPage();
    await quizPage.goto('http://localhost:8080/quiz-editor', { 
      waitUntil: 'networkidle',
      timeout: 15000 
    });
    await quizPage.waitForTimeout(2000);
    
    const quizScreens = await quizPage.locator('[data-screen-anchor]').count();
    console.log(`âœ“ QuizEditor: ${quizScreens} Ã©crans`);
    
    // Validation
    expect(formScreens).toBe(2);
    expect(quizScreens).toBe(3);
    
    console.log('âœ“ FormEditor: 2 Ã©crans âœ“');
    console.log('âœ“ QuizEditor: 3 Ã©crans âœ“');
    console.log('âœ“ DiffÃ©renciation correcte entre les deux Ã©diteurs');
    
    await quizPage.close();
  });

  test('âœ“ RÃ‰CAPITULATIF: Toutes les fonctionnalitÃ©s clÃ©s', async ({ page }) => {
    console.log('\n=== VALIDATION FINALE DU FORMEDITOR ===\n');
    
    const checks = {
      'Page charge': false,
      '2 Ã©crans prÃ©sents': false,
      'Pas de screen3': false,
      'Canvas prÃ©sents': false,
      'Structure HTML valide': false
    };
    
    // 1. Page charge
    const htmlLength = (await page.content()).length;
    checks['Page charge'] = htmlLength > 10000;
    console.log(`1. Page charge: ${checks['Page charge'] ? 'âœ“' : 'âœ—'} (${htmlLength} chars)`);
    
    // 2. 2 Ã©crans
    const screenCount = await page.locator('[data-screen-anchor]').count();
    checks['2 Ã©crans prÃ©sents'] = screenCount === 2;
    console.log(`2. 2 Ã©crans prÃ©sents: ${checks['2 Ã©crans prÃ©sents'] ? 'âœ“' : 'âœ—'} (${screenCount} trouvÃ©s)`);
    
    // 3. Pas de screen3
    const screen3Count = await page.locator('[data-screen-anchor="screen3"]').count();
    checks['Pas de screen3'] = screen3Count === 0;
    console.log(`3. Pas de screen3: ${checks['Pas de screen3'] ? 'âœ“' : 'âœ—'} (${screen3Count} trouvÃ©s)`);
    
    // 4. Canvas
    const canvasCount = await page.locator('[class*="canvas"]').count();
    checks['Canvas prÃ©sents'] = canvasCount > 0;
    console.log(`4. Canvas prÃ©sents: ${checks['Canvas prÃ©sents'] ? 'âœ“' : 'âœ—'} (${canvasCount} trouvÃ©s)`);
    
    // 5. Structure HTML
    const rootExists = await page.locator('#root').count() > 0;
    checks['Structure HTML valide'] = rootExists;
    console.log(`5. Structure HTML valide: ${checks['Structure HTML valide'] ? 'âœ“' : 'âœ—'}`);
    
    console.log('\n=== RÃ‰SULTAT ===\n');
    const passedChecks = Object.values(checks).filter(v => v).length;
    const totalChecks = Object.keys(checks).length;
    console.log(`${passedChecks}/${totalChecks} vÃ©rifications passÃ©es\n`);
    
    // Tous les checks doivent passer
    Object.entries(checks).forEach(([name, passed]) => {
      expect(passed).toBeTruthy();
    });
    
    console.log('ðŸŽ‰ REFONTE DU FORMEDITOR: SUCCÃˆS TOTAL! ðŸŽ‰\n');
  });
});

test.describe('Comparaison FormEditor vs QuizEditor', () => {
  test('Les deux Ã©diteurs ont une architecture similaire mais des Ã©crans diffÃ©rents', async ({ page, context }) => {
    // FormEditor
    await page.goto('http://localhost:8080/form-editor', { 
      waitUntil: 'networkidle',
      timeout: 15000 
    });
    await page.waitForTimeout(2000);
    
    const formScreens = await page.locator('[data-screen-anchor]').count();
    const formCanvas = await page.locator('[class*="canvas"]').count();
    const formHTML = (await page.content()).length;
    
    // QuizEditor  
    const quizPage = await context.newPage();
    await quizPage.goto('http://localhost:8080/quiz-editor', { 
      waitUntil: 'networkidle',
      timeout: 15000 
    });
    await quizPage.waitForTimeout(2000);
    
    const quizScreens = await quizPage.locator('[data-screen-anchor]').count();
    const quizCanvas = await quizPage.locator('[class*="canvas"]').count();
    const quizHTML = (await quizPage.content()).length;
    
    console.log('\n=== COMPARAISON FORMEDITOR VS QUIZEDITOR ===\n');
    console.log(`FormEditor:`);
    console.log(`  - Ã‰crans: ${formScreens}`);
    console.log(`  - Canvas: ${formCanvas}`);
    console.log(`  - HTML size: ${formHTML} chars`);
    console.log(`\nQuizEditor:`);
    console.log(`  - Ã‰crans: ${quizScreens}`);
    console.log(`  - Canvas: ${quizCanvas}`);
    console.log(`  - HTML size: ${quizHTML} chars`);
    console.log(`\nâœ“ FormEditor: ${formScreens} Ã©crans (attendu: 2)`);
    console.log(`âœ“ QuizEditor: ${quizScreens} Ã©crans (attendu: 3)`);
    console.log(`âœ“ Architecture similaire: ${Math.abs(formHTML - quizHTML) < 100000 ? 'OUI' : 'NON'}`);
    
    // Validations
    expect(formScreens).toBe(2);
    expect(quizScreens).toBe(3);
    expect(formCanvas).toBeGreaterThan(0);
    expect(quizCanvas).toBeGreaterThan(0);
    
    await quizPage.close();
  });
});
