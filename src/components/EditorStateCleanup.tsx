import { useEffect } from 'react';
import { useLocation } from 'react-router-dom';
import { useEditorStore } from '../stores/editorStore';

/**
 * Composant pour nettoyer les Ã©tats lors du changement d'Ã©diteur
 * Ã‰vite les conflits entre les diffÃ©rents Ã©diteurs
 */
const EditorStateCleanup: React.FC = () => {
  const location = useLocation();
  const resetEditorState = useEditorStore((state) => state.resetEditorState);
  
  useEffect(() => {
    // DÃ©terminer le type d'Ã©diteur basÃ© sur la route
    const getEditorType = () => {
      if (location.pathname === '/form-editor') return 'form-editor';
      if (location.pathname === '/jackpot-editor') return 'jackpot-editor';
      if (location.pathname === '/quiz-editor') return 'quiz-editor';
      if (location.pathname === '/scratch-card-editor') return 'scratch-card-editor';
      return 'default';
    };
    
    const currentEditorType = getEditorType();
    
    // Nettoyer les Ã©tats des autres Ã©diteurs pour Ã©viter les conflits
    const allEditorTypes = ['form-editor', 'jackpot-editor', 'quiz-editor', 'scratch-card-editor', 'default'];
    const otherEditorTypes = allEditorTypes.filter(type => type !== currentEditorType);
    
    // Reset les Ã©tats des autres Ã©diteurs
    otherEditorTypes.forEach(editorType => {
      resetEditorState(editorType);
    });
    
    console.log(`ðŸ§¹ [EditorStateCleanup] Nettoyage des Ã©tats pour l'Ã©diteur: ${currentEditorType}`);

    // Forcer le reset de l'Ã©diteur courant Ã  la fermeture/actualisation
    const handleBeforeUnload = () => {
      try {
        resetEditorState(currentEditorType);
      } catch {}
    };

    window.addEventListener('beforeunload', handleBeforeUnload);

    // Ã€ la sortie de la page (changement de route / unmount), on reset aussi l'Ã©diteur courant
    return () => {
      window.removeEventListener('beforeunload', handleBeforeUnload);
      try {
        resetEditorState(currentEditorType);
      } catch {}
    };
  }, [location.pathname, resetEditorState]);
  
  return null; // Ce composant ne rend rien
};

export default EditorStateCleanup;
