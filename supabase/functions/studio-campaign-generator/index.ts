
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import "https://deno.land/x/xhr@0.1.0/mod.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface StudioCampaignRequest {
  websiteUrl?: string;
  logoUrl?: string;
  backgroundImageUrl?: string;
  campaignType?: string;
  targetAudience?: string;
  objective?: string;
}

interface BrandAnalysis {
  primaryColor: string;
  secondaryColor: string;
  accentColor: string;
  fontFamily: string;
  brandName: string;
  industry: string;
  tone: string;
}

interface GeneratedContent {
  title: string;
  subtitle: string;
  callToAction: string;
  description: string;
  visualStyle: {
    typography: string;
    layout: string;
    effectsAndShadows: string;
  };
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const OPENAI_API_KEY = Deno.env.get('OPENAI_API_KEY');
    if (!OPENAI_API_KEY) {
      throw new Error('OPENAI_API_KEY is not set');
    }

    const body: StudioCampaignRequest = await req.json();
    console.log('Studio campaign request:', body);

    // 1. Analyser le site web pour extraire les infos de marque
    let brandAnalysis: BrandAnalysis | null = null;
    if (body.websiteUrl) {
      brandAnalysis = await analyzeBrand(body.websiteUrl, OPENAI_API_KEY, body.backgroundImageUrl, body.logoUrl);
    }

    // 2. G√©n√©rer le contenu de campagne avec IA
    const generatedContent = await generateCampaignContent(
      body,
      brandAnalysis,
      OPENAI_API_KEY
    );

    // 3. Cr√©er la configuration compl√®te de la campagne
    const campaignConfig = {
      brandAnalysis,
      content: generatedContent,
      design: {
        primaryColor: brandAnalysis?.primaryColor || '#841b60',
        secondaryColor: brandAnalysis?.secondaryColor || '#dc2626',
        accentColor: brandAnalysis?.accentColor || '#ffffff',
        fontFamily: brandAnalysis?.fontFamily || 'Titan One',
        backgroundImageUrl: body.backgroundImageUrl,
        logoUrl: body.logoUrl,
      }
    };

    console.log('Final campaign config:', campaignConfig);

    return new Response(JSON.stringify(campaignConfig), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Error in studio-campaign-generator:', error);
    const message = error instanceof Error ? error.message : String(error);
    return new Response(JSON.stringify({ error: message }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});

async function analyzeBrand(websiteUrl: string, apiKey: string, backgroundImageUrl?: string, logoUrl?: string): Promise<BrandAnalysis> {
  console.log('Analyzing brand from:', websiteUrl);
  console.log('Background image URL:', backgroundImageUrl);
  console.log('Logo URL:', logoUrl);
  
  // R√©cup√©rer le contenu du site web
  let websiteContent = '';
  try {
    const response = await fetch(websiteUrl);
    websiteContent = await response.text();
    // Limiter le contenu pour √©viter les tokens excessifs
    websiteContent = websiteContent.substring(0, 10000);
  } catch (error) {
    console.warn('Could not fetch website content:', error);
    websiteContent = `Site web: ${websiteUrl}`;
  }

  const logoAnalysis = logoUrl ? `

üé® ANALYSE DU LOGO FOURNI: ${logoUrl}
Analysez visuellement ce logo pour d√©tecter:
1. Style typographique (est-ce condens√© comme "Sifonn", "Impact", "Bebas Neue" ?)
2. Si le texte est en majuscules et condens√©, utilisez "Titan One" ou "Bebas Neue"
3. Si c'est un style moderne sans-serif √©pais, utilisez "Oswald" ou "Anton"
4. Si c'est traditionnel, utilisez "Montserrat" ou "Roboto"
5. Couleurs dominantes du logo (√† prioriser sur tout le reste)
` : '';

  const backgroundAnalysis = backgroundImageUrl ? `

üñºÔ∏è IMAGE DE FOND PRIORITAIRE: ${backgroundImageUrl}
R√àGLE ABSOLUE: Cette image de fond doit √™tre la SOURCE PRINCIPALE des couleurs.
Analysez cette image pour extraire:
1. Couleur la plus dominante (primaryColor) - celle qui occupe le plus d'espace
2. Couleur secondaire contrastante (secondaryColor) 
3. Couleur d'accent claire ou fonc√©e (accentColor) qui ressort bien
4. Ignorez les couleurs du site web si cette image est fournie
5. Assurez-vous que primaryColor et secondaryColor cr√©ent un bon contraste
` : '';

  const prompt = `
Tu es un expert en analyse de marque et design visuel. Analyse ce site web et extrais les informations cl√©s.

CONTENU DU SITE WEB:
${websiteContent}
${logoAnalysis}
${backgroundAnalysis}

üîç INSTRUCTIONS SP√âCIALES POUR LES POLICES:
- Si tu d√©tectes un style "SIFONN", "Impact", "condens√©" ou "majuscules √©paisses" ‚Üí utilise "Titan One"
- Si tu vois un style moderne sans-serif √©pais ‚Üí utilise "Bebas Neue" ou "Oswald"  
- Si c'est du texte traditionnel ‚Üí utilise "Montserrat", "Roboto" ou "Open Sans"
- Pour Homair ou style vacances ‚Üí privil√©gie "Titan One" ou "Bebas Neue" (impact fort)
- TOUJOURS analyser le logo upload√© en priorit√© pour la police

üé® PRIORIT√âS DES COULEURS:
1. Image de fond (si fournie) = PRIORIT√â ABSOLUE
2. Logo upload√© = PRIORIT√â √âLEV√âE  
3. Site web = Seulement si pas d'image/logo

Retourne UNIQUEMENT un objet JSON valide avec cette structure exacte:
{
  "primaryColor": "#hexcode",
  "secondaryColor": "#hexcode", 
  "accentColor": "#hexcode",
  "fontFamily": "nom exact de police d√©tect√©e",
  "brandName": "nom de la marque",
  "industry": "secteur d'activit√©",
  "tone": "ton de communication"
}

EXEMPLES DE POLICES √Ä UTILISER:
- "Titan One" (pour style Sifonn/Impact/condens√©)
- "Bebas Neue" (moderne condens√©)
- "Oswald" (sans-serif condens√©)
- "Anton" (bold condens√©)
- "Montserrat" (moderne polyvalent)
- "Roboto" (tech/moderne)

‚ö†Ô∏è IMPORTANT: R√©ponds SEULEMENT avec le JSON, aucun autre texte.
`;

  const response = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${apiKey}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      model: 'gpt-4o-mini',
      messages: [
        { 
          role: 'system', 
          content: 'Tu es un expert en analyse de marque et design visuel. Tu d√©tectes les polices de style "Sifonn", "Impact", condens√©es et les couleurs dominantes des images. R√©ponds UNIQUEMENT avec du JSON valide, aucun texte suppl√©mentaire.' 
        },
        { role: 'user', content: prompt }
      ],
      temperature: 0.2,
    }),
  });

  const data = await response.json();
  const content = data.choices[0].message.content;
  
  console.log('Raw AI response for brand analysis:', content);
  
  try {
    // Nettoyer le contenu pour extraire le JSON
    let cleanContent = content.trim();
    
    // Supprimer les blocs de code markdown s'il y en a
    if (cleanContent.startsWith('```')) {
      cleanContent = cleanContent.replace(/```json\s*/, '').replace(/```\s*$/, '');
    }
    
    // Trouver le JSON dans la r√©ponse
    const jsonMatch = cleanContent.match(/\{[\s\S]*\}/);
    const jsonContent = jsonMatch ? jsonMatch[0] : cleanContent;
    
    console.log('Cleaned JSON content:', jsonContent);
    
    const parsedResult = JSON.parse(jsonContent);
    console.log('Successfully parsed brand analysis:', parsedResult);
    
    return parsedResult;
  } catch (e) {
    console.error('Failed to parse brand analysis. Raw content:', content);
    console.error('Parse error:', e);
    
    // Fallback intelligent bas√© sur le contexte
    const fallbackFont = logoUrl || backgroundImageUrl ? 'Titan One' : 'Montserrat';
    
    return {
      primaryColor: '#006799',
      secondaryColor: '#5bbad5', 
      accentColor: '#ffffff',
      fontFamily: fallbackFont,
      brandName: 'Votre Marque',
      industry: 'g√©n√©ral',
      tone: 'moderne'
    };
  }
}

async function generateCampaignContent(
  request: StudioCampaignRequest,
  brandAnalysis: BrandAnalysis | null,
  apiKey: string
): Promise<GeneratedContent> {
  console.log('Generating campaign content...');

  const brandInfo = brandAnalysis ? `
Marque: ${brandAnalysis.brandName}
Secteur: ${brandAnalysis.industry}
Ton: ${brandAnalysis.tone}
Police: ${brandAnalysis.fontFamily}
Couleurs: ${brandAnalysis.primaryColor}, ${brandAnalysis.secondaryColor}
` : '';

  const prompt = `
Cr√©ez une campagne marketing de niveau STUDIO professionnel avec ces informations:

${brandInfo}
Type de campagne: ${request.campaignType || 'jeu-concours'}
Public cible: ${request.targetAudience || 'g√©n√©ral'}
Objectif: ${request.objective || 'engagement'}

Cr√©ez du contenu percutant qui ressemble aux meilleures campagnes Canva/Adobe. Le contenu doit √™tre:
- IMPACTANT et M√âMORABLE
- Adapt√© √† la marque et son secteur
- Optimis√© pour le digital et mobile
- Niveau studio professionnel avec un titre accrocheur

Retournez UNIQUEMENT un objet JSON avec cette structure exacte:
{
  "title": "TITRE PRINCIPAL IMPACTANT (en majuscules si appropri√©)",
  "subtitle": "Sous-titre compl√©mentaire engageant",
  "callToAction": "CALL TO ACTION PUISSANT",
  "description": "Description d√©taill√©e de l'offre et des b√©n√©fices",
  "visualStyle": {
    "typography": "Style typographique recommand√©",
    "layout": "Disposition recommand√©e des √©l√©ments", 
    "effectsAndShadows": "Effets visuels et ombres recommand√©s"
  }
}

Exemples de titres pour diff√©rents secteurs:
- Tourisme: "D√âCOUVREZ VOTRE √âVASION DE R√äVE !"
- Fitness: "TRANSFORMEZ VOTRE CORPS AUJOURD'HUI !"
- Tech: "D√âVERROUILLEZ LE FUTUR !"
- Mode: "R√âV√âLEZ VOTRE STYLE UNIQUE !"

‚ö†Ô∏è IMPORTANT: R√©ponds SEULEMENT avec le JSON, aucun autre texte.
`;

  const response = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${apiKey}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      model: 'gpt-4o-mini',
      messages: [
        { 
          role: 'system', 
          content: 'Tu es un expert en marketing digital et copywriting. Cr√©e du contenu de niveau studio professionnel. R√©ponds UNIQUEMENT avec du JSON valide, aucun texte suppl√©mentaire.' 
        },
        { role: 'user', content: prompt }
      ],
      temperature: 0.8,
    }),
  });

  const data = await response.json();
  const content = data.choices[0].message.content;
  
  console.log('Raw AI response for content generation:', content);
  
  try {
    // Nettoyer le contenu pour extraire le JSON
    let cleanContent = content.trim();
    
    // Supprimer les blocs de code markdown s'il y en a
    if (cleanContent.startsWith('```')) {
      cleanContent = cleanContent.replace(/```json\s*/, '').replace(/```\s*$/, '');
    }
    
    // Trouver le JSON dans la r√©ponse
    const jsonMatch = cleanContent.match(/\{[\s\S]*\}/);
    const jsonContent = jsonMatch ? jsonMatch[0] : cleanContent;
    
    console.log('Cleaned content JSON:', jsonContent);
    
    const parsedResult = JSON.parse(jsonContent);
    console.log('Successfully parsed campaign content:', parsedResult);
    
    return parsedResult;
  } catch (e) {
    console.error('Failed to parse campaign content. Raw content:', content);
    console.error('Parse error:', e);
    
    // Fallback avec du contenu par d√©faut
    return {
      title: 'PARTICIPEZ & GAGNEZ',
      subtitle: 'Une exp√©rience unique vous attend',
      callToAction: 'JOUER MAINTENANT',
      description: 'Tentez votre chance et remportez des prix exceptionnels',
      visualStyle: {
        typography: 'Titre en gras, sous-titre l√©ger',
        layout: 'Centr√© avec hi√©rarchie claire',
        effectsAndShadows: 'Ombres port√©es subtiles'
      }
    };
  }
}
