import { test, expect, Page } from '@playwright/test';

/**
 * Test Suite: Validation des Corrections du Bouton "Param√®tres"
 * 
 * Objectif: V√©rifier que le message d'erreur "Sauvegarde distante √©chou√©e" 
 * n'appara√Æt plus lors de l'ouverture des param√®tres de campagne.
 * 
 * Sc√©narios test√©s:
 * 1. QuizEditor - Cr√©ation auto + ouverture param√®tres
 * 2. DesignEditor - Cr√©ation auto + ouverture param√®tres
 * 3. FormEditor - Cr√©ation auto + ouverture param√®tres
 * 4. JackpotEditor - Cr√©ation auto + ouverture param√®tres
 * 5. ScratchCardEditor - Cr√©ation auto + ouverture param√®tres
 * 6. ModelEditor - Cr√©ation auto + ouverture param√®tres
 */

// Helper: Authentification r√©elle via page de login
async function ensureAuthenticated(page: Page) {
  // V√©rifier si d√©j√† connect√©
  const currentUrl = page.url();
  
  // Si on est sur la page de login, se connecter
  if (currentUrl.includes('/login') || currentUrl.includes('/auth')) {
    console.log('üîê Authentification n√©cessaire...');
    
    // Remplir le formulaire de connexion
    const emailInput = page.locator('input[type="email"], input[placeholder*="email"]').first();
    const passwordInput = page.locator('input[type="password"], input[placeholder*="mot de passe"]').first();
    const loginButton = page.locator('button:has-text("Se connecter")').first();
    
    // Utiliser des credentials de test (√† adapter selon votre environnement)
    await emailInput.fill('test@prosplay.com');
    await passwordInput.fill('testpassword123');
    await loginButton.click();
    
    // Attendre la redirection apr√®s login
    await page.waitForURL(url => {
      const urlString = url.toString();
      return !urlString.includes('/login') && !urlString.includes('/auth');
    }, { timeout: 10000 });
    console.log('‚úì Authentification r√©ussie');
  } else {
    // V√©rifier localStorage pour session Supabase
    const hasSession = await page.evaluate(() => {
      const keys = Object.keys(localStorage);
      return keys.some(k => k.includes('supabase') && k.includes('auth'));
    });
    
    if (!hasSession) {
      console.log('‚ö†Ô∏è Pas de session Supabase - redirection vers login');
      await page.goto('/login');
      await ensureAuthenticated(page); // R√©cursion pour se connecter
    }
  }
}

// Helper: Attendre que le r√©seau soit calme
async function waitForNetworkIdle(page: Page, timeout = 3000) {
  await page.waitForLoadState('networkidle', { timeout });
}

// Helper: V√©rifier l'absence d'erreur dans la console
async function checkNoConsoleErrors(page: Page, allowedErrors: string[] = []) {
  const errors: string[] = [];
  
  page.on('console', (msg) => {
    if (msg.type() === 'error') {
      const text = msg.text();
      // Filtrer les erreurs autoris√©es
      if (!allowedErrors.some(allowed => text.includes(allowed))) {
        errors.push(text);
      }
    }
  });

  return errors;
}

// Helper: Fonction de test g√©n√©rique pour chaque √©diteur
async function testEditorSettingsButton(
  page: Page, 
  editorUrl: string, 
  editorName: string,
  expectedType: string
) {
  console.log(`\nüß™ Test ${editorName}...`);

  // 1. Naviguer vers l'√©diteur
  await page.goto(editorUrl, { waitUntil: 'networkidle' });
  console.log(`‚úì Navigation vers ${editorUrl}`);

  // 2. Attendre que la page soit charg√©e
  await page.waitForLoadState('domcontentloaded');
  await page.waitForTimeout(2000); // Laisser le temps √† React de render
  console.log(`‚úì Page charg√©e`);

  // 3. V√©rifier que le bouton "Param√®tres" existe
  const settingsButton = page.locator('button:has-text("Param√®tres")').first();
  await expect(settingsButton).toBeVisible({ timeout: 10000 });
  console.log(`‚úì Bouton "Param√®tres" visible`);

  // 4. V√©rifier que le bouton n'est PAS disabled
  await expect(settingsButton).toBeEnabled();
  console.log(`‚úì Bouton "Param√®tres" activ√© (pas disabled)`);

  // 5. Cliquer sur "Param√®tres"
  await settingsButton.click();
  console.log(`‚úì Clic sur "Param√®tres"`);

  // 6. Attendre que la modale s'ouvre
  const modal = page.locator('text=Param√®tres de la campagne').first();
  await expect(modal).toBeVisible({ timeout: 10000 });
  console.log(`‚úì Modale "Param√®tres de la campagne" ouverte`);

  // 7. V√©rifier l'absence du message d'erreur
  const errorMessage = page.locator('text=Sauvegarde distante √©chou√©e');
  await expect(errorMessage).not.toBeVisible({ timeout: 2000 });
  console.log(`‚úì Pas de message "Sauvegarde distante √©chou√©e"`);

  // 8. V√©rifier que les onglets sont pr√©sents
  const channelsTab = page.locator('button:has-text("Canaux")').first();
  const parametersTab = page.locator('button:has-text("Param√®tres")').first();
  await expect(channelsTab).toBeVisible();
  await expect(parametersTab).toBeVisible();
  console.log(`‚úì Onglets de la modale pr√©sents`);

  // 9. Remplir le formulaire de base
  // Onglet "Canaux" devrait √™tre actif par d√©faut
  const campaignNameInput = page.locator('input[name="name"], input[placeholder*="Nom"]').first();
  if (await campaignNameInput.isVisible({ timeout: 5000 })) {
    await campaignNameInput.fill(`Test ${editorName} - ${Date.now()}`);
    console.log(`‚úì Nom de campagne rempli`);
  }

  // 10. Cliquer sur "Enregistrer"
  const saveButton = page.locator('button:has-text("Enregistrer")').first();
  if (await saveButton.isVisible({ timeout: 5000 })) {
    await saveButton.click();
    console.log(`‚úì Clic sur "Enregistrer"`);

    // 11. Attendre que la modale se ferme (ou v√©rifier succ√®s)
    await page.waitForTimeout(2000);
    
    // V√©rifier que le message d'erreur n'appara√Æt PAS
    await expect(errorMessage).not.toBeVisible({ timeout: 2000 });
    console.log(`‚úì Sauvegarde r√©ussie (pas d'erreur)`);
  }

  // 12. V√©rifier la console pour les logs de cr√©ation de campagne
  const logs = await page.evaluate(() => {
    // @ts-ignore
    return window.__consoleLogs || [];
  });
  console.log(`‚úì Logs console v√©rifi√©s`);

  console.log(`‚úÖ ${editorName} - TEST R√âUSSI\n`);
}

// Test 1: QuizEditor
test('QuizEditor - Bouton Param√®tres fonctionne sans erreur', async ({ page }) => {
  const errors = await checkNoConsoleErrors(page);
  
  // Aller sur la page et g√©rer l'authentification si n√©cessaire
  await page.goto('/quiz-editor');
  await ensureAuthenticated(page);
  
  // Si on a √©t√© redirig√©, retourner √† l'√©diteur
  if (!page.url().includes('/quiz-editor')) {
    await page.goto('/quiz-editor');
  }
  
  await testEditorSettingsButton(page, '/quiz-editor', 'QuizEditor', 'quiz');
  
  // V√©rifier qu'il n'y a pas eu d'erreurs console critiques
  if (errors.length > 0) {
    console.warn('‚ö†Ô∏è Erreurs console d√©tect√©es:', errors);
  }
});

// Test 2: DesignEditor (Roue de la Fortune)
test('DesignEditor - Bouton Param√®tres fonctionne sans erreur', async ({ page }) => {
  const errors = await checkNoConsoleErrors(page);
  await ensureAuthenticated(page);
  await testEditorSettingsButton(page, '/design-editor', 'DesignEditor', 'wheel');
  
  if (errors.length > 0) {
    console.warn('‚ö†Ô∏è Erreurs console d√©tect√©es:', errors);
  }
});

// Test 3: FormEditor
test('FormEditor - Bouton Param√®tres fonctionne sans erreur', async ({ page }) => {
  const errors = await checkNoConsoleErrors(page);
  await ensureAuthenticated(page);
  await testEditorSettingsButton(page, '/form-editor', 'FormEditor', 'form');
  
  if (errors.length > 0) {
    console.warn('‚ö†Ô∏è Erreurs console d√©tect√©es:', errors);
  }
});

// Test 4: JackpotEditor
test('JackpotEditor - Bouton Param√®tres fonctionne sans erreur', async ({ page }) => {
  const errors = await checkNoConsoleErrors(page);
  await ensureAuthenticated(page);
  await testEditorSettingsButton(page, '/jackpot-editor', 'JackpotEditor', 'jackpot');
  
  if (errors.length > 0) {
    console.warn('‚ö†Ô∏è Erreurs console d√©tect√©es:', errors);
  }
});

// Test 5: ScratchCardEditor
test('ScratchCardEditor - Bouton Param√®tres fonctionne sans erreur', async ({ page }) => {
  const errors = await checkNoConsoleErrors(page);
  await ensureAuthenticated(page);
  await testEditorSettingsButton(page, '/scratch-editor', 'ScratchCardEditor', 'scratch');
  
  if (errors.length > 0) {
    console.warn('‚ö†Ô∏è Erreurs console d√©tect√©es:', errors);
  }
});

// Test 6: ModelEditor
test('ModelEditor - Bouton Param√®tres fonctionne sans erreur', async ({ page }) => {
  const errors = await checkNoConsoleErrors(page);
  await ensureAuthenticated(page);
  await testEditorSettingsButton(page, '/model-editor', 'ModelEditor', 'wheel');
  
  if (errors.length > 0) {
    console.warn('‚ö†Ô∏è Erreurs console d√©tect√©es:', errors);
  }
});

// Test 7: V√©rification BDD - Pas de brouillons localStorage
test('V√©rification: Aucun brouillon localStorage cr√©√©', async ({ page }) => {
  console.log(`\nüß™ Test: V√©rification localStorage...`);

  // Aller sur n'importe quel √©diteur
  await page.goto('/quiz-editor', { waitUntil: 'networkidle' });
  
  // Ouvrir et fermer les param√®tres
  const settingsButton = page.locator('button:has-text("Param√®tres")').first();
  await settingsButton.click();
  await page.waitForTimeout(2000);
  
  // Fermer la modale (si bouton X existe)
  const closeButton = page.locator('button[title="Fermer"]').first();
  if (await closeButton.isVisible({ timeout: 2000 })) {
    await closeButton.click();
  }

  // V√©rifier localStorage
  const drafts = await page.evaluate(() => {
    const keys = Object.keys(localStorage);
    return keys.filter(k => 
      k.includes('campaign:settings:draft') || 
      k.includes('campaign:draft')
    );
  });

  console.log(`‚úì Cl√©s localStorage v√©rifi√©es`);
  
  if (drafts.length > 0) {
    console.warn(`‚ö†Ô∏è ${drafts.length} brouillon(s) localStorage d√©tect√©(s):`, drafts);
    // Note: Ce n'est pas forc√©ment une erreur si des brouillons existaient d√©j√†
  } else {
    console.log(`‚úÖ Aucun nouveau brouillon localStorage cr√©√©`);
  }
});

// Test 8: Test de R√©gression - Navigation fonctionne toujours
test('R√©gression: Navigation Dashboard ‚Üí √âditeur fonctionne', async ({ page }) => {
  console.log(`\nüß™ Test: R√©gression Navigation...`);

  // Aller au dashboard
  await page.goto('/dashboard', { waitUntil: 'networkidle' });
  console.log(`‚úì Dashboard charg√©`);

  // V√©rifier que la page charge
  await expect(page.locator('text=Campagnes').or(page.locator('text=Dashboard'))).toBeVisible({ timeout: 10000 });
  
  console.log(`‚úÖ Navigation Dashboard - TEST R√âUSSI\n`);
});
